// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_BASE_URL")
}

model Admin {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String
  refresh_token RefreshToken?
}

model User {
  user_id          Int             @id @default(autoincrement())
  name             String
  user_created_at  DateTime        @default(now())
  cellphone        String          @unique
  wa_id            String
  custom_services  CustomService[]
  Groups           Groups?         @relation(fields: [groups_id], references: [group_id])
  groups_id        Int?
  on_attendance    Boolean         @default(false)
  survey_answer    SurveyAnswers?  @relation(fields: [survey_answer_id], references: [answer_id])
  survey_answer_id Int?
  UserMessage      UserMessage[]

  @@map("users")
}

model UserMessage {
  message_id         Int      @id @default(autoincrement())
  message_text       String
  message_created_at DateTime @default(now())
  message_from       User     @relation(fields: [user_cellphone], references: [cellphone])
  user_cellphone     String

  @@map("user_messages")
}

model Attendant {
  id         Int      @id @default(autoincrement())
  name       String
  cellphone  String
  wa_id      String
  created_at DateTime @default(now())
  role       Role     @relation(fields: [role_id], references: [id])
  role_id    Int

  @@map("attendants")
}

model CustomService {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  finished_at    DateTime @default(now())
  user           User?    @relation(fields: [user_cellphone], references: [cellphone])
  user_cellphone String

  @@map("services")
}

model Role {
  role_name  String
  id         Int         @id @default(autoincrement())
  attendants Attendant[]

  @@map("roles")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      Admin  @relation(fields: [u_id], references: [id])
  u_id      Int    @unique

  @@map("refreshToken")
}

model Groups {
  group_id      Int     @id @default(autoincrement())
  subject       String
  group_name    String
  type          Int
  participants  User[]
  created_on_wa Boolean @default(false)
  wa_group_id   String?
}

model Survey {
  survey_id         Int             @id @default(autoincrement())
  survey_text       String
  survey_subject    String
  survey_votes      SurveyAnswers[]
  survey_sended     Boolean         @default(false)
  survey_send_hour  DateTime?
  survey_created_at DateTime        @default(now())

  @@map("survey")
}

model SurveyAnswers {
  answer_id      Int     @id @default(autoincrement())
  answer_text    String
  answer_users   User[]
  survey         Survey? @relation(fields: [id_from_survey], references: [survey_id])
  id_from_survey Int?
}
